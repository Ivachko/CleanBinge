-- MySQL Script generated by MySQL Workbench
-- 09/13/16 11:36:40
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema BingeConding
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema BingeConding
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `BingeConding` DEFAULT CHARACTER SET utf8 ;
USE `BingeConding` ;

-- -----------------------------------------------------
-- Table `BingeConding`.`Utilisateur`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BingeConding`.`Utilisateur` (
  `idUtilisateur` INT NOT NULL AUTO_INCREMENT,
  `Nom` VARCHAR(60) NULL,
  `Prenom` VARCHAR(60) NULL,
  `Date_Naissance` DATE NULL,
  `Mail` TINYTEXT NULL,
  `Pseudo` VARCHAR(70) NULL,
  `Password` VARCHAR(45) NULL,
  `Date_Creation` DATETIME NULL,
  PRIMARY KEY (`idUtilisateur`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BingeConding`.`Moderateur`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BingeConding`.`Moderateur` (
  `idModerateur` INT NOT NULL AUTO_INCREMENT,
  `Pseudo` VARCHAR(45) NULL,
  `Password` VARCHAR(45) NULL,
  PRIMARY KEY (`idModerateur`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BingeConding`.`Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BingeConding`.`Type` (
  `idType` INT NOT NULL AUTO_INCREMENT,
  `Nom` VARCHAR(80) NULL,
  `Description` TEXT NULL,
  PRIMARY KEY (`idType`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BingeConding`.`Contenu`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BingeConding`.`Contenu` (
  `idContenu` INT NOT NULL AUTO_INCREMENT,
  `Nom` TINYTEXT NULL,
  `Date_Ajout` DATETIME NULL,
  `Description` TEXT NULL,
  `Etat` TINYINT(1) NULL DEFAULT 0,
  `idType` INT NOT NULL,
  `idAuteur` INT NOT NULL,
  PRIMARY KEY (`idContenu`),
  INDEX `ContenuToType_idx` (`idType` ASC),
  INDEX `ContenuToAuteur_idx` (`idAuteur` ASC),
  CONSTRAINT `ContenuToType`
    FOREIGN KEY (`idType`)
    REFERENCES `BingeConding`.`Type` (`idType`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ContenuToAuteur`
    FOREIGN KEY (`idAuteur`)
    REFERENCES `BingeConding`.`Utilisateur` (`idUtilisateur`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BingeConding`.`Historique_Moderation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BingeConding`.`Historique_Moderation` (
  `idHistorique_Moderation` INT NOT NULL AUTO_INCREMENT,
  `idModerateur` INT NOT NULL,
  `idContenu` INT NOT NULL,
  `Date_Validation` DATETIME NOT NULL,
  PRIMARY KEY (`idHistorique_Moderation`, `idModerateur`, `idContenu`),
  INDEX `HistoriqueToModeration_idx` (`idModerateur` ASC),
  INDEX `HistoriqueToContenu_idx` (`idContenu` ASC),
  CONSTRAINT `HistoriqueToModeration`
    FOREIGN KEY (`idModerateur`)
    REFERENCES `BingeConding`.`Moderateur` (`idModerateur`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `HistoriqueToContenu`
    FOREIGN KEY (`idContenu`)
    REFERENCES `BingeConding`.`Contenu` (`idContenu`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BingeConding`.`Commentaire`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BingeConding`.`Commentaire` (
  `idUtilisateur` INT NOT NULL,
  `idContenu` INT NOT NULL,
  `Date` DATETIME NOT NULL,
  `Texte` TEXT NOT NULL,
  PRIMARY KEY (`idUtilisateur`, `idContenu`),
  INDEX `CommentaireToUtilisateur_idx` (`idUtilisateur` ASC),
  INDEX `CommentaireToContenu_idx` (`idContenu` ASC),
  CONSTRAINT `CommentaireToUtilisateur`
    FOREIGN KEY (`idUtilisateur`)
    REFERENCES `BingeConding`.`Utilisateur` (`idUtilisateur`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `CommentaireToContenu`
    FOREIGN KEY (`idContenu`)
    REFERENCES `BingeConding`.`Contenu` (`idContenu`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BingeConding`.`Favoris`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BingeConding`.`Favoris` (
  `idUtilisateur` INT NOT NULL,
  `IdContenu` INT NOT NULL,
  PRIMARY KEY (`idUtilisateur`, `IdContenu`),
  INDEX `FavToContenu_idx` (`IdContenu` ASC),
  CONSTRAINT `FavToUtilisateur`
    FOREIGN KEY (`idUtilisateur`)
    REFERENCES `BingeConding`.`Utilisateur` (`idUtilisateur`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FavToContenu`
    FOREIGN KEY (`IdContenu`)
    REFERENCES `BingeConding`.`Contenu` (`idContenu`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BingeConding`.`Reaction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BingeConding`.`Reaction` (
  `idUtilisateur` INT NOT NULL,
  `idContenu` INT NOT NULL,
  `Reaction` TINYINT(1) NULL,
  PRIMARY KEY (`idUtilisateur`, `idContenu`),
  INDEX `ReacToContenu_idx` (`idContenu` ASC),
  CONSTRAINT `ReacToUtilisateur`
    FOREIGN KEY (`idUtilisateur`)
    REFERENCES `BingeConding`.`Utilisateur` (`idUtilisateur`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ReacToContenu`
    FOREIGN KEY (`idContenu`)
    REFERENCES `BingeConding`.`Contenu` (`idContenu`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BingeConding`.`Emoticone`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BingeConding`.`Emoticone` (
  `idEmoticone` INT NOT NULL AUTO_INCREMENT,
  `Nom` VARCHAR(45) NULL,
  `Url` TEXT NULL,
  PRIMARY KEY (`idEmoticone`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BingeConding`.`Reac_Emoticone`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BingeConding`.`Reac_Emoticone` (
  `idUtilisateur` INT NOT NULL,
  `idContenu` INT NOT NULL,
  `idEmoticone` INT NOT NULL,
  INDEX `ReacEmoToContenu_idx` (`idContenu` ASC),
  INDEX `ReacEmoToEmoticone_idx` (`idEmoticone` ASC),
  CONSTRAINT `ReacEmoToUtilisateur`
    FOREIGN KEY (`idUtilisateur`)
    REFERENCES `BingeConding`.`Utilisateur` (`idUtilisateur`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ReacEmoToContenu`
    FOREIGN KEY (`idContenu`)
    REFERENCES `BingeConding`.`Contenu` (`idContenu`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ReacEmoToEmoticone`
    FOREIGN KEY (`idEmoticone`)
    REFERENCES `BingeConding`.`Emoticone` (`idEmoticone`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BingeConding`.`Abonnement`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BingeConding`.`Abonnement` (
  `idUtilisateur` INT NOT NULL,
  `idAuteur` INT NOT NULL,
  PRIMARY KEY (`idUtilisateur`, `idAuteur`),
  INDEX `UtilisateurToAuteur_idx` (`idAuteur` ASC),
  CONSTRAINT `UtilisateurToUtilisateur`
    FOREIGN KEY (`idUtilisateur`)
    REFERENCES `BingeConding`.`Utilisateur` (`idUtilisateur`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `UtilisateurToAuteur`
    FOREIGN KEY (`idAuteur`)
    REFERENCES `BingeConding`.`Utilisateur` (`idUtilisateur`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
